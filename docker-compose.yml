version: '3.7'
services:
  trino-coordinator:
    image: 'trinodb/trino:422'
    hostname: trino-coordinator
    container_name: TRINO-COORDINATOR
    ports:
      - '8080:8080'
    volumes:
      - ./etc:/etc/trino
      - ./run-trino-sql:/run-trino-sql:ro 
    networks:
      - trino-network

  mariadb:
    image: 'mariadb:10.3.32'
    hostname: mariadb
    container_name: mariaDB
    ports:
      - '3306:3306'
    environment:
      MYSQL_ROOT_PASSWORD: admin
      MYSQL_USER: admin
      MYSQL_PASSWORD: admin
      MYSQL_DATABASE: metastore_db
    volumes:
      - mariadb_data:/var/lib/mysql 
    networks:
      - trino-network

  hive-metastore:
    image: 'bitsondatadev/hive-metastore:latest'
    hostname: hive-metastore
    container_name: HIVE-METASTORE
    ports:
      - '9083:9083'
    volumes:
      - ./conf/metastore-site.xml:/opt/apache-hive-metastore-3.0.0-bin/conf/metastore-site.xml:ro
    environment:
      METASTORE_DB_HOSTNAME: mariadb
    depends_on:
      - mariadb
    networks:
      - trino-network

  minio:
    image: 'minio/minio:RELEASE.2023-07-21T21-12-44Z'
    hostname: minio
    container_name: MINIO
    ports:
      - '9000:9000'
      - '9001:9001'
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
    command: server --console-address ":9001" /data
    volumes:
      - minio_data:/data    
    networks:
      - trino-network

 # ðŸ†• build container setup giá»‘ng repo
  minio-setup:
    build:
      context: ./containers/setup
    container_name: MINIO-SETUP
    environment:
      MINIO_ENDPOINT: http://minio:9000
      MINIO_ACCESS_KEY: minio
      MINIO_SECRET_KEY: minio123
      BUCKET_NAME: lakehouse
    depends_on:
      - minio
    networks: ['trino-network']
    restart: "no"


  airflow-db:
    image: postgres:13
    container_name: AIRFLOW-DB
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - airflow_db:/var/lib/postgresql/data
    networks:
      - trino-network

  airflow-init:
    image: apache/airflow:2.10.3-python3.11
    container_name: AIRFLOW-INIT
    depends_on:
      - airflow-db
    environment:
      AIRFLOW__CORE__LOAD_EXAMPLES: "False"
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow-db:5432/airflow
    volumes:
      - ./dags:/opt/airflow/dags
      - airflow_logs:/opt/airflow/logs
    command:
      - bash
      - -c
      - |
        airflow db init
        airflow users create --username admin --password admin \
          --firstname Admin --lastname User --role Admin --email admin@example.com || true
    networks:
      - trino-network
    restart: "no"

  airflow-webserver:
    image: apache/airflow:2.10.3-python3.11
    container_name: AIRFLOW-WS
    depends_on:
      - airflow-init
      - airflow-db
    environment:
      AIRFLOW__CORE__LOAD_EXAMPLES: "False"
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow-db:5432/airflow
    volumes:
      - ./dags:/opt/airflow/dags
      - airflow_logs:/opt/airflow/logs
      - ./requirements.txt:/requirements.txt 
      - ./dbt:/opt/airflow/dbt 
    ports:
      - "8081:8080"   # Airflow UI
    command: bash -lc "pip install -r /requirements.txt && exec airflow webserver"
    networks:
      - trino-network

  airflow-scheduler:
    image: apache/airflow:2.10.3-python3.11
    container_name: AIRFLOW-SCHED
    depends_on:
      - airflow-init
      - airflow-db
    environment:
      AIRFLOW__CORE__LOAD_EXAMPLES: "False"
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow-db:5432/airflow
    volumes:
      - ./dags:/opt/airflow/dags
      - airflow_logs:/opt/airflow/logs
      - ./requirements.txt:/requirements.txt 
      - ./dbt:/opt/airflow/dbt
    command: bash -lc "pip install -r /requirements.txt && exec airflow scheduler"
    networks:
      - trino-network

volumes:
  airflow_db:
  airflow_logs:
  minio_data:  
  mariadb_data: 
networks:
  trino-network:
    driver: bridge
